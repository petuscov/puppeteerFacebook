'use strict'

var mysql      = require('mysql');
var connection = mysql.createConnection({
  host     : '127.0.0.1',
  user     : 'root',
  password : 'root',
  database : 'messengerbots'
});

/*var options = {
  encoding: 'utf8'
};*/

/**
 * saves message sent to bot, and the time it takes to respond it. 
 **
 * @param  {String} - botId - messenger id of the bot.
 * @param  {number} - timeUntilResponse - time in seconds up to 3 decimal positions. xx.yyy
 * @param  {String} - messageSent - message sent to the bot, if button pressed content of the button, if multimedia (image, audio), null.
 * @param  {boolean} - buttonPressed - indicates that a button triggered the response.
 * @param  {boolean} - multimediaMessage - indicates that a multimedia message triggered the response.
 */

function saveMessageSent(botId, timeUntilResponse, messageSent, buttonPressed, multimediaMessage){
	return new Promise(function(resolve,reject){
		connection.query('insert into messagesenttobot(botId, timeUntilResponse, messageSent, buttonPressed, multimediaMessage) values ("'+botId+'","'+timeUntilResponse +'","'+messageSent+'",'+buttonPressed+','+ multimediaMessage+');', 
		function (error, results, fields) {
			if (error) {
			  return connection.rollback(function() {
				reject(error);
			  });
			}else{
				resolve();//TODO retrieve generated id.
			}
		});
	});
}

/**
 * saves response received from bot, individual message.
 **
 * @param  {String} - botId - messenger id of the bot that responded.
 * @param  {String} - idMessageSent - DB id of the message sent, of which this is response.
 * @param  {boolean} - multimediaResponse - indicates that a multimedia response has been received (image,audio, video).
 * @param  {boolean} - containsEmojis - indicates that the response contains emojis.
 * @param  {boolean} - isButton - indicates that the response is a button.
 * @param  {String} - responseText - text received from the bot, if multimedia null.

 * @param  {String} - the response saved in json.
 */

function saveResponse(botId, idMessageSent, multimediaResponse, containsEmojis, isButton, responseText){
	return new Promise(function(resolve,reject){

		connection.query('insert into botresponse(botid, idmessagesent, multimediaresponse, containsemojis, isbutton, responsetext) values ("'+botId+'","'+idMessageSent +'",'+multimediaResponse+','+containsEmojis+','+ isButton+',"' +responseText+ '");', 
		function (error, results, fields) {
			if (error) {
			  return connection.rollback(function() {
				reject(error);
			  });
			}else{
				var autogeneratedId = connection.query('SELECT SCOPE_IDENTITY();',
				function (error, results, fields) {
					if(error){
						reject(error);
					}
					resolve(autogeneratedId);
				});
			}
		});
	});
}

/**
 * saves bot info. If bot already exists, updates its info.
 **
 * @param  {String} - id - botId, messenger id of the bot.
 * @param  {String} - name - bot Name.
 * @param  {boolean} - connect - if the bot is reachable or not.
 * @param  {String} - url - url to reach the bot. ("https://www.messenger.com/t/" + botId). ("https://www.messenger.com/t/" + botName) could be valid too, but id is length consistant.
 * @param  {String} - chatbottle - ¿¿¿¿TODO???
 * @param  {String} - commands - ¿¿TODO??
 */
function saveBotBasicInfo(id, name, connect, url){ // commands,){
	return new Promise(function(resolve,reject){
		connection.query('Select * from bots where id="' + id +'";', function(error, results, fields){

			if(!error){
				if(!results.length){
					connection.query('insert into bots(id,name,connect,url) values ("'+id+'","'+name +'",'+connect+',"'+url +'");', function (error, results, fields) {
						if (error) {
						  return connection.rollback(function() {
							reject(error);
						  });
						}else{
							resolve();
						}
					});
				}else{
					connection.query('update bots set connect = '+connect+', url = "'+url+'", name = "'+name+'" WHERE id = "'+id+'" ;', function (error, results, fields) {
						if (error) {
						  return connection.rollback(function() {
							reject();
						  });
						}else{
							resolve();
						}
					});
				}
			}
		});
	});
}

/**
 * saves bot info. If bot already exists, updates its info.
 **
 * @param  {String} - id - botId, messenger id of the bot.
 * @param  {number} - likes - number of likes.
 */
function saveBotLikes(id, likes){ 
	return new Promise(function(resolve,reject){
		connection.query('Select * from bots where id="' + id +'";', function(error, results, fields){

			if(!error){
				if(!results.length){
					connection.query('insert into bots(id,likes) values ("'+id+'",' +likes+ ');', function (error, results, fields) {
						if (error) {
						  return connection.rollback(function() {
							reject(error);
						  });
						}else{
							resolve();
						}
					});
				}else{
					connection.query('update bots set connect = '+connect+', url = "'+url+'", likes = '+likes+', name = "'+name+'" WHERE id = "'+id+'" ;', function (error, results, fields) {
						if (error) {
						  return connection.rollback(function() {
							reject();
						  });
						}else{
							resolve();
						}
					});
				}
			}
		});
	});
}

function endConnection(){
	connection.end();
}

module.exports = {
	saveBotInfo : saveBotBasicInfo,
	endConnection:endConnection,
	saveMessageSent: saveMessageSent,
	saveResponse: saveResponse,
	saveBotLikes: saveBotLikes
};
//no hace falta realizar connection.connect(), con createConnection vale,
// y tampoco connection.end() tras cada operación de DB, con realizar una vez al terminar correcto.